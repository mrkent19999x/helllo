# telegram_dashboard_bot.py - TELEGRAM BOT DASHBOARD ƒê·∫∏P TI·∫æNG VI·ªÜT
# Multi-Machine Management System v·ªõi giao di·ªán tr·ª±c quan

import os
import sys
import time
import json
import logging
import requests
import sqlite3
import threading
import asyncio
import platform
import socket
import hashlib
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Tuple

# Telegram Bot API
import telebot
from telebot.types import (
    InlineKeyboardMarkup, InlineKeyboardButton, 
    ReplyKeyboardMarkup, KeyboardButton,
    Message, CallbackQuery
)

# Local imports
try:
    import sys
    sys.path.append('src')
    from cloud_enterprise import (
        load_cloud_config, save_cloud_config,
        load_enterprises, ENTERPRISE_DB, MACHINE_ID
    )
except ImportError:
    # Fallback n·∫øu kh√¥ng import ƒë∆∞·ª£c
    ENTERPRISE_DB = None
    MACHINE_ID = None
    logging.warning("Kh√¥ng th·ªÉ import cloud_enterprise, s·ª≠ d·ª•ng fallback mode")

# --- CONFIG & SETUP --- #
APP_DIR = Path(os.getenv('APPDATA', Path.home())) / 'WindowsUpdate'
APP_DIR.mkdir(parents=True, exist_ok=True)

TELEGRAM_CONFIG_FILE = APP_DIR / 'telegram_dashboard.json'
BOT_LOG_FILE = APP_DIR / 'telegram_bot.log'
MACHINES_DB = APP_DIR / 'machines.db'

# Bot configuration
BOT_CONFIG = {
    "bot_token": "",
    "authorized_users": [],
    "admin_users": [],
    "auto_sync_interval": 300,  # 5 ph√∫t
    "max_machines": 50,
    "dashboard_timeout": 300,  # 5 ph√∫t
    "language": "vi"
}

# Machine status colors
STATUS_COLORS = {
    "online": "üü¢",
    "offline": "üî¥", 
    "warning": "üü°",
    "error": "üî¥",
    "syncing": "üîÑ",
    "protected": "üõ°Ô∏è"
}

# Logging setup
logging.basicConfig(
    filename=str(BOT_LOG_FILE),
    encoding='utf-8',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

class TelegramDashboardBot:
    """Telegram Bot v·ªõi Dashboard ƒë·∫πp ƒë·ªÉ qu·∫£n l√Ω Multi-Machine."""
    
    def __init__(self, bot_token: str = None):
        """Kh·ªüi t·∫°o bot."""
        self.bot_token = bot_token or self.load_bot_token()
        if not self.bot_token:
            raise ValueError("Bot token kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y!")
            
        self.bot = telebot.TeleBot(self.bot_token)
        self.machines = {}  # {machine_id: machine_info}
        self.user_sessions = {}  # {user_id: session_data}
        self.sync_thread = None
        self.running = False
        
        # Setup bot handlers
        self.setup_handlers()
        
        # Initialize database
        self.init_machines_database()
        
        # Load existing machines
        self.load_machines()
        
        logging.info("Telegram Dashboard Bot ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng!")
    
    def load_bot_token(self) -> str:
        """Load bot token t·ª´ config file."""
        try:
            if TELEGRAM_CONFIG_FILE.exists():
                with open(TELEGRAM_CONFIG_FILE, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    return config.get('bot_token', '')
            return ''
        except Exception as e:
            logging.error(f"Load bot token error: {e}")
            return ''
    
    def save_bot_config(self):
        """L∆∞u bot config."""
        try:
            config = {
                'bot_token': self.bot_token,
                'authorized_users': BOT_CONFIG['authorized_users'],
                'admin_users': BOT_CONFIG['admin_users'],
                'auto_sync_interval': BOT_CONFIG['auto_sync_interval'],
                'max_machines': BOT_CONFIG['max_machines'],
                'dashboard_timeout': BOT_CONFIG['dashboard_timeout'],
                'language': BOT_CONFIG['language']
            }
            
            with open(TELEGRAM_CONFIG_FILE, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
                
            logging.info("Bot config ƒë√£ ƒë∆∞·ª£c l∆∞u!")
            
        except Exception as e:
            logging.error(f"Save bot config error: {e}")
    
    def init_machines_database(self):
        """Kh·ªüi t·∫°o database cho machines."""
        try:
            conn = sqlite3.connect(str(MACHINES_DB))
            conn.execute('''
                CREATE TABLE IF NOT EXISTS machines (
                    machine_id TEXT PRIMARY KEY,
                    machine_name TEXT,
                    ip_address TEXT,
                    mac_address TEXT,
                    platform TEXT,
                    status TEXT DEFAULT 'offline',
                    last_seen TIMESTAMP,
                    enterprise_count INTEGER DEFAULT 0,
                    xml_protected_count INTEGER DEFAULT 0,
                    last_sync TIMESTAMP,
                    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.execute('''
                CREATE TABLE IF NOT EXISTS machine_enterprises (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    machine_id TEXT,
                    enterprise_id TEXT,
                    enterprise_name TEXT,
                    xml_count INTEGER DEFAULT 0,
                    last_updated TIMESTAMP,
                    FOREIGN KEY (machine_id) REFERENCES machines (machine_id)
                )
            ''')
            
            conn.execute('''
                CREATE TABLE IF NOT EXISTS machine_logs (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    machine_id TEXT,
                    log_type TEXT,
                    message TEXT,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (machine_id) REFERENCES machines (machine_id)
                )
            ''')
            
            conn.commit()
            conn.close()
            logging.info("Machines database ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o!")
            
        except Exception as e:
            logging.error(f"Init machines database error: {e}")
    
    def load_machines(self):
        """Load machines t·ª´ database."""
        try:
            conn = sqlite3.connect(str(MACHINES_DB))
            cursor = conn.execute('''
                SELECT machine_id, machine_name, ip_address, mac_address, 
                       platform, status, last_seen, enterprise_count, 
                       xml_protected_count, last_sync
                FROM machines
            ''')
            
            machines_data = cursor.fetchall()
            conn.close()
            
            for row in machines_data:
                machine_id, name, ip, mac, platform, status, last_seen, ent_count, xml_count, last_sync = row
                
                self.machines[machine_id] = {
                    'machine_id': machine_id,
                    'machine_name': name or f"Machine-{machine_id[:8]}",
                    'ip_address': ip,
                    'mac_address': mac,
                    'platform': platform,
                    'status': status,
                    'last_seen': last_seen,
                    'enterprise_count': ent_count,
                    'xml_protected_count': xml_count,
                    'last_sync': last_sync,
                    'online': self.is_machine_online(machine_id, last_seen)
                }
            
            logging.info(f"ƒê√£ load {len(self.machines)} machines t·ª´ database!")
            
        except Exception as e:
            logging.error(f"Load machines error: {e}")
    
    def is_machine_online(self, machine_id: str, last_seen: str) -> bool:
        """Ki·ªÉm tra machine c√≥ online kh√¥ng."""
        try:
            if not last_seen:
                return False
                
            last_seen_dt = datetime.fromisoformat(last_seen)
            time_diff = datetime.now() - last_seen_dt
            
            # Machine ƒë∆∞·ª£c coi l√† online n·∫øu last_seen < 5 ph√∫t
            return time_diff < timedelta(minutes=5)
            
        except Exception as e:
            logging.error(f"Check machine online error: {e}")
            return False
    
    def setup_handlers(self):
        """Setup c√°c bot handlers."""
        
        @self.bot.message_handler(commands=['start', 'menu'])
        def handle_start(message: Message):
            """X·ª≠ l√Ω l·ªánh start/menu."""
            user_id = message.from_user.id
            username = message.from_user.username or message.from_user.first_name
            
            if not self.is_authorized_user(user_id):
                self.send_unauthorized_message(message.chat.id)
                return
            
            # T·∫°o session cho user
            self.user_sessions[user_id] = {
                'current_menu': 'main_dashboard',
                'last_activity': datetime.now(),
                'selected_machine': None,
                'selected_enterprise': None
            }
            
            # Hi·ªÉn th·ªã main dashboard
            self.show_main_dashboard(message.chat.id, user_id)
            
            logging.info(f"User {username} ({user_id}) ƒë√£ m·ªü dashboard!")
        
        @self.bot.message_handler(commands=['help'])
        def handle_help(message: Message):
            """X·ª≠ l√Ω l·ªánh help."""
            help_text = """
ü§ñ **TAX FORTRESS TELEGRAM BOT - H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG**

üì± **L·ªÜNH C∆† B·∫¢N:**
‚Ä¢ `/start` ho·∫∑c `/menu` - M·ªü Dashboard ch√≠nh
‚Ä¢ `/help` - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y
‚Ä¢ `/status` - Ki·ªÉm tra tr·∫°ng th√°i h·ªá th·ªëng
‚Ä¢ `/machines` - Xem danh s√°ch m√°y t√≠nh
‚Ä¢ `/enterprises` - Xem danh s√°ch doanh nghi·ªáp

üéÆ **C√ÅCH S·ª¨ D·ª§NG:**
1. G√µ `/menu` ƒë·ªÉ m·ªü Dashboard
2. S·ª≠ d·ª•ng c√°c n√∫t b·∫•m ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng
3. Dashboard s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t m·ªói 5 ph√∫t
4. Nh·∫≠n th√¥ng b√°o real-time khi c√≥ s·ª± c·ªë

üõ°Ô∏è **T√çNH NƒÇNG CH√çNH:**
‚Ä¢ Qu·∫£n l√Ω nhi·ªÅu m√°y t√≠nh t·ª´ xa
‚Ä¢ Gi√°m s√°t b·∫£o v·ªá file XML thu·∫ø
‚Ä¢ ƒê·ªìng b·ªô cloud t·ª± ƒë·ªông
‚Ä¢ C·∫£nh b√°o real-time qua Telegram

üí° **L∆ØU √ù:**
‚Ä¢ Ch·ªâ user ƒë∆∞·ª£c ·ªßy quy·ªÅn m·ªõi s·ª≠ d·ª•ng ƒë∆∞·ª£c
‚Ä¢ Dashboard timeout sau 5 ph√∫t kh√¥ng ho·∫°t ƒë·ªông
‚Ä¢ T·ª± ƒë·ªông sync d·ªØ li·ªáu m·ªói 5 ph√∫t
            """
            
            self.bot.reply_to(message, help_text, parse_mode='Markdown')
        
        @self.bot.message_handler(commands=['status'])
        def handle_status(message: Message):
            """X·ª≠ l√Ω l·ªánh status."""
            if not self.is_authorized_user(message.from_user.id):
                return
                
            status_text = self.get_system_status_text()
            self.bot.reply_to(message, status_text, parse_mode='Markdown')
        
        @self.bot.message_handler(commands=['machines'])
        def handle_machines(message: Message):
            """X·ª≠ l√Ω l·ªánh machines."""
            if not self.is_authorized_user(message.from_user.id):
                return
                
            self.show_machines_list(message.chat.id, message.from_user.id)
        
        @self.bot.message_handler(commands=['enterprises'])
        def handle_enterprises(message: Message):
            """X·ª≠ l√Ω l·ªánh enterprises."""
            if not self.is_authorized_user(message.from_user.id):
                return
                
            self.show_enterprises_list(message.chat.id, message.from_user.id)
        
        # Callback query handler cho inline keyboard
        @self.bot.callback_query_handler(func=lambda call: True)
        def handle_callback_query(call: CallbackQuery):
            """X·ª≠ l√Ω callback query t·ª´ inline keyboard."""
            user_id = call.from_user.id
            
            if not self.is_authorized_user(user_id):
                self.bot.answer_callback_query(call.id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!")
                return
            
            # Update user session
            if user_id in self.user_sessions:
                self.user_sessions[user_id]['last_activity'] = datetime.now()
            
            # X·ª≠ l√Ω callback data
            self.handle_callback_data(call)
            
            # Answer callback query
            self.bot.answer_callback_query(call.id)
    
    def is_authorized_user(self, user_id: int) -> bool:
        """Ki·ªÉm tra user c√≥ ƒë∆∞·ª£c ·ªßy quy·ªÅn kh√¥ng."""
        return (user_id in BOT_CONFIG['authorized_users'] or 
                user_id in BOT_CONFIG['admin_users'])
    
    def send_unauthorized_message(self, chat_id: int):
        """G·ª≠i tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ·ªßy quy·ªÅn."""
        unauthorized_text = """
‚ùå **KH√îNG ƒê∆Ø·ª¢C ·ª¶Y QUY·ªÄN!**

B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng TAX FORTRESS Bot.

üîê **ƒê·ªÉ ƒë∆∞·ª£c ·ªßy quy·ªÅn:**
‚Ä¢ Li√™n h·ªá Admin ƒë·ªÉ th√™m Chat ID c·ªßa b·∫°n
‚Ä¢ Chat ID c·ªßa b·∫°n: `{chat_id}`
‚Ä¢ G·ª≠i Chat ID n√†y cho Admin

üìû **Li√™n h·ªá Admin:**
‚Ä¢ Email: admin@taxfortress.com
‚Ä¢ Telegram: @TaxFortressAdmin
        """.format(chat_id=chat_id)
        
        self.bot.send_message(chat_id, unauthorized_text, parse_mode='Markdown')
    
    def get_system_status_text(self) -> str:
        """L·∫•y text tr·∫°ng th√°i h·ªá th·ªëng."""
        try:
            total_machines = len(self.machines)
            online_machines = sum(1 for m in self.machines.values() if m.get('online', False))
            offline_machines = total_machines - online_machines
            
            total_enterprises = sum(m.get('enterprise_count', 0) for m in self.machines.values())
            total_xml_protected = sum(m.get('xml_protected_count', 0) for m in self.machines.values())
            
            status_text = f"""
üìä **TR·∫†NG TH√ÅI H·ªÜ TH·ªêNG TAX FORTRESS**

üñ•Ô∏è **M√ÅY T√çNH:**
‚Ä¢ T·ªïng s·ªë: {total_machines}
‚Ä¢ Online: {online_machines} üü¢
‚Ä¢ Offline: {offline_machines} üî¥

üè¢ **DOANH NGHI·ªÜP:**
‚Ä¢ T·ªïng s·ªë: {total_enterprises}
‚Ä¢ File XML ƒë∆∞·ª£c b·∫£o v·ªá: {total_xml_protected}

‚è∞ **C·∫¨P NH·∫¨T:** {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}

üîÑ **T·ª∞ ƒê·ªòNG SYNC:** M·ªói 5 ph√∫t
üõ°Ô∏è **B·∫¢O V·ªÜ:** Ho·∫°t ƒë·ªông 24/7
            """
            
            return status_text
            
        except Exception as e:
            logging.error(f"Get system status error: {e}")
            return "‚ùå L·ªói khi l·∫•y tr·∫°ng th√°i h·ªá th·ªëng!"
    
    def show_main_dashboard(self, chat_id: int, user_id: int):
        """Hi·ªÉn th·ªã main dashboard."""
        try:
            # T·∫°o inline keyboard cho dashboard
            keyboard = InlineKeyboardMarkup(row_width=2)
            
            # Row 1: Machine Management
            keyboard.add(
                InlineKeyboardButton("üñ•Ô∏è Qu·∫£n L√Ω M√°y", callback_data="menu_machines"),
                InlineKeyboardButton("üè¢ Doanh Nghi·ªáp", callback_data="menu_enterprises")
            )
            
            # Row 2: System & Cloud
            keyboard.add(
                InlineKeyboardButton("üìä H·ªá Th·ªëng", callback_data="menu_system"),
                InlineKeyboardButton("‚òÅÔ∏è Cloud Sync", callback_data="menu_cloud")
            )
            
            # Row 3: Monitoring & Alerts
            keyboard.add(
                InlineKeyboardButton("üëÅÔ∏è Gi√°m S√°t", callback_data="menu_monitoring"),
                InlineKeyboardButton("üö® C·∫£nh B√°o", callback_data="menu_alerts")
            )
            
            # Row 4: Settings & Help
            keyboard.add(
                InlineKeyboardButton("‚öôÔ∏è C√†i ƒê·∫∑t", callback_data="menu_settings"),
                InlineKeyboardButton("‚ùì Tr·ª£ Gi√∫p", callback_data="menu_help")
            )
            
            # Row 5: Quick Actions
            keyboard.add(
                InlineKeyboardButton("üîÑ Sync Ngay", callback_data="action_sync_now"),
                InlineKeyboardButton("üìà B√°o C√°o", callback_data="action_report")
            )
            
            dashboard_text = f"""
üéØ **TAX FORTRESS DASHBOARD**

Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi h·ªá th·ªëng qu·∫£n l√Ω b·∫£o v·ªá thu·∫ø!

üìä **T·ªîNG QUAN:**
‚Ä¢ M√°y t√≠nh: {len(self.machines)}
‚Ä¢ Doanh nghi·ªáp: {sum(m.get('enterprise_count', 0) for m in self.machines.values())}
‚Ä¢ Tr·∫°ng th√°i: {'üü¢ Ho·∫°t ƒë·ªông' if self.running else 'üî¥ D·ª´ng'}

üéÆ **S·ª¨ D·ª§NG:**
Ch·ªçn ch·ª©c nƒÉng t·ª´ menu b√™n d∆∞·ªõi ƒë·ªÉ qu·∫£n l√Ω h·ªá th·ªëng.

‚è∞ **C·∫≠p nh·∫≠t:** {datetime.now().strftime('%H:%M:%S')}
            """
            
            self.bot.send_message(
                chat_id, 
                dashboard_text, 
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logging.error(f"Show main dashboard error: {e}")
            self.bot.send_message(chat_id, "‚ùå L·ªói khi hi·ªÉn th·ªã dashboard!")
    
    def handle_callback_data(self, call: CallbackQuery):
        """X·ª≠ l√Ω callback data t·ª´ inline keyboard."""
        try:
            data = call.data
            chat_id = call.message.chat.id
            user_id = call.from_user.id
            
            logging.info(f"Callback data: {data} from user {user_id}")
            
            if data.startswith('menu_'):
                # Menu navigation
                if data == 'menu_machines':
                    self.show_machines_list(chat_id, user_id)
                elif data == 'menu_enterprises':
                    self.show_enterprises_list(chat_id, user_id)
                elif data == 'menu_system':
                    self.show_system_menu(chat_id, user_id)
                elif data == 'menu_cloud':
                    self.show_cloud_menu(chat_id, user_id)
                elif data == 'menu_monitoring':
                    self.show_monitoring_menu(chat_id, user_id)
                elif data == 'menu_alerts':
                    self.show_alerts_menu(chat_id, user_id)
                elif data == 'menu_settings':
                    self.show_settings_menu(chat_id, user_id)
                elif data == 'menu_help':
                    self.show_help_menu(chat_id, user_id)
                    
            elif data.startswith('action_'):
                # Quick actions
                if data == 'action_sync_now':
                    self.perform_sync_now(chat_id, user_id)
                elif data == 'action_report':
                    self.generate_report(chat_id, user_id)
                    
            elif data.startswith('machine_'):
                # Machine actions
                self.handle_machine_actions(data, chat_id, user_id)
                
            elif data.startswith('enterprise_'):
                # Enterprise actions
                self.handle_enterprise_actions(data, chat_id, user_id)
                
            else:
                # Unknown callback data
                self.bot.send_message(chat_id, "‚ùå L·ªánh kh√¥ng ƒë∆∞·ª£c nh·∫≠n di·ªán!")
                
        except Exception as e:
            logging.error(f"Handle callback data error: {e}")
            self.bot.send_message(call.message.chat.id, "‚ùå L·ªói x·ª≠ l√Ω l·ªánh!")
    
    def show_machines_list(self, chat_id: int, user_id: int):
        """Hi·ªÉn th·ªã danh s√°ch m√°y t√≠nh."""
        try:
            if not self.machines:
                self.bot.send_message(
                    chat_id,
                    "üìù Ch∆∞a c√≥ m√°y t√≠nh n√†o ƒë∆∞·ª£c ƒëƒÉng k√Ω!\n\n‚ûï S·ª≠ d·ª•ng Control Panel ƒë·ªÉ th√™m m√°y t√≠nh m·ªõi.",
                    parse_mode='Markdown'
                )
                return
            
            # T·∫°o inline keyboard cho t·ª´ng machine
            keyboard = InlineKeyboardMarkup(row_width=1)
            
            for machine_id, machine_info in self.machines.items():
                status_icon = "üü¢" if machine_info.get('online', False) else "üî¥"
                machine_name = machine_info.get('machine_name', f"Machine-{machine_id[:8]}")
                
                button_text = f"{status_icon} {machine_name} ({machine_id[:8]})"
                callback_data = f"machine_select_{machine_id}"
                
                keyboard.add(InlineKeyboardButton(button_text, callback_data=callback_data))
            
            # Back button
            keyboard.add(InlineKeyboardButton("üîô Quay L·∫°i", callback_data="back_to_main"))
            
            machines_text = f"""
üñ•Ô∏è **DANH S√ÅCH M√ÅY T√çNH**

T·ªïng s·ªë: {len(self.machines)} m√°y
üü¢ Online: {sum(1 for m in self.machines.values() if m.get('online', False))}
üî¥ Offline: {sum(1 for m in self.machines.values() if not m.get('online', False))}

Ch·ªçn m√°y t√≠nh ƒë·ªÉ xem chi ti·∫øt:
            """
            
            self.bot.send_message(
                chat_id,
                machines_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logging.error(f"Show machines list error: {e}")
            self.bot.send_message(chat_id, "‚ùå L·ªói khi hi·ªÉn th·ªã danh s√°ch m√°y t√≠nh!")
    
    def show_enterprises_list(self, chat_id: int, user_id: int):
        """Hi·ªÉn th·ªã danh s√°ch doanh nghi·ªáp."""
        try:
            # L·∫•y danh s√°ch enterprises t·ª´ database
            enterprises = self.get_all_enterprises()
            
            if not enterprises:
                self.bot.send_message(
                    chat_id,
                    "üìù Ch∆∞a c√≥ doanh nghi·ªáp n√†o ƒë∆∞·ª£c ƒëƒÉng k√Ω!\n\n‚ûï S·ª≠ d·ª•ng Control Panel ƒë·ªÉ th√™m doanh nghi·ªáp m·ªõi.",
                    parse_mode='Markdown'
                )
                return
            
            # T·∫°o inline keyboard cho t·ª´ng enterprise
            keyboard = InlineKeyboardMarkup(row_width=1)
            
            for enterprise in enterprises:
                enterprise_id = enterprise['enterprise_id']
                enterprise_name = enterprise['enterprise_name']
                xml_count = enterprise.get('xml_count', 0)
                
                button_text = f"üè¢ {enterprise_name} ({xml_count} XML)"
                callback_data = f"enterprise_select_{enterprise_id}"
                
                keyboard.add(InlineKeyboardButton(button_text, callback_data=callback_data))
            
            # Back button
            keyboard.add(InlineKeyboardButton("üîô Quay L·∫°i", callback_data="back_to_main"))
            
            enterprises_text = f"""
üè¢ **DANH S√ÅCH DOANH NGHI·ªÜP**

T·ªïng s·ªë: {len(enterprises)} doanh nghi·ªáp
üìÑ T·ªïng file XML: {sum(e.get('xml_count', 0) for e in enterprises)}

Ch·ªçn doanh nghi·ªáp ƒë·ªÉ xem chi ti·∫øt:
            """
            
            self.bot.send_message(
                chat_id,
                enterprises_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logging.error(f"Show enterprises list error: {e}")
            self.bot.send_message(chat_id, "‚ùå L·ªói khi hi·ªÉn th·ªã danh s√°ch doanh nghi·ªáp!")
    
    def get_all_enterprises(self) -> List[Dict]:
        """L·∫•y t·∫•t c·∫£ enterprises t·ª´ database."""
        try:
            enterprises = []
            
            # L·∫•y t·ª´ cloud_enterprise database n·∫øu c√≥
            if ENTERPRISE_DB and ENTERPRISE_DB.exists():
                conn = sqlite3.connect(str(ENTERPRISE_DB))
                cursor = conn.execute('''
                    SELECT enterprise_id, enterprise_name, admin_contact
                    FROM enterprises
                    ORDER BY enterprise_id
                ''')
                
                for row in cursor.fetchall():
                    enterprise_id, name, admin = row
                    
                    # ƒê·∫øm s·ªë XML files
                    cursor2 = conn.execute('''
                        SELECT COUNT(*) FROM xml_cloud_warehouse 
                        WHERE enterprise_id = ?
                    ''', (enterprise_id,))
                    xml_count = cursor2.fetchone()[0]
                    
                    enterprises.append({
                        'enterprise_id': enterprise_id,
                        'enterprise_name': name,
                        'admin_contact': admin,
                        'xml_count': xml_count
                    })
                
                conn.close()
            
            return enterprises
            
        except Exception as e:
            logging.error(f"Get all enterprises error: {e}")
            return []
    
    def show_system_menu(self, chat_id: int, user_id: int):
        """Hi·ªÉn th·ªã menu h·ªá th·ªëng."""
        try:
            keyboard = InlineKeyboardMarkup(row_width=2)
            
            keyboard.add(
                InlineKeyboardButton("üìä Tr·∫°ng Th√°i", callback_data="system_status"),
                InlineKeyboardButton("üñ•Ô∏è Th√¥ng Tin M√°y", callback_data="system_info")
            )
            
            keyboard.add(
                InlineKeyboardButton("üìà Hi·ªáu Su·∫•t", callback_data="system_performance"),
                InlineKeyboardButton("üîß C√†i ƒê·∫∑t", callback_data="system_settings")
            )
            
            keyboard.add(InlineKeyboardButton("üîô Quay L·∫°i", callback_data="back_to_main"))
            
            system_text = """
‚öôÔ∏è **MENU H·ªÜ TH·ªêNG**

Ch·ªçn ch·ª©c nƒÉng ƒë·ªÉ qu·∫£n l√Ω h·ªá th·ªëng:
            """
            
            self.bot.send_message(
                chat_id,
                system_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logging.error(f"Show system menu error: {e}")
            self.bot.send_message(chat_id, "‚ùå L·ªói khi hi·ªÉn th·ªã menu h·ªá th·ªëng!")
    
    def show_cloud_menu(self, chat_id: int, user_id: int):
        """Hi·ªÉn th·ªã menu cloud sync."""
        try:
            keyboard = InlineKeyboardMarkup(row_width=2)
            
            keyboard.add(
                InlineKeyboardButton("‚òÅÔ∏è GitHub Sync", callback_data="cloud_github"),
                InlineKeyboardButton("üîÑ Auto Sync", callback_data="cloud_auto_sync")
            )
            
            keyboard.add(
                InlineKeyboardButton("üì§ Upload", callback_data="cloud_upload"),
                InlineKeyboardButton("üì• Download", callback_data="cloud_download")
            )
            
            keyboard.add(InlineKeyboardButton("üîô Quay L·∫°i", callback_data="back_to_main"))
            
            cloud_text = """
‚òÅÔ∏è **MENU CLOUD SYNC**

Qu·∫£n l√Ω ƒë·ªìng b·ªô d·ªØ li·ªáu v·ªõi GitHub:
            """
            
            self.bot.send_message(
                chat_id,
                cloud_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logging.error(f"Show cloud menu error: {e}")
            self.bot.send_message(chat_id, "‚ùå L·ªói khi hi·ªÉn th·ªã menu cloud!")
    
    def show_monitoring_menu(self, chat_id: int, user_id: int):
        """Hi·ªÉn th·ªã menu gi√°m s√°t."""
        try:
            keyboard = InlineKeyboardMarkup(row_width=2)
            
            keyboard.add(
                InlineKeyboardButton("üëÅÔ∏è Real-time", callback_data="monitoring_realtime"),
                InlineKeyboardButton("üìä Logs", callback_data="monitoring_logs")
            )
            
            keyboard.add(
                InlineKeyboardButton("üö® Alerts", callback_data="monitoring_alerts"),
                InlineKeyboardButton("üìà Reports", callback_data="monitoring_reports")
            )
            
            keyboard.add(InlineKeyboardButton("üîô Quay L·∫°i", callback_data="back_to_main"))
            
            monitoring_text = """
üëÅÔ∏è **MENU GI√ÅM S√ÅT**

Theo d√µi ho·∫°t ƒë·ªông h·ªá th·ªëng:
            """
            
            self.bot.send_message(
                chat_id,
                monitoring_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logging.error(f"Show monitoring menu error: {e}")
            self.bot.send_message(chat_id, "‚ùå L·ªói khi hi·ªÉn th·ªã menu gi√°m s√°t!")
    
    def show_alerts_menu(self, chat_id: int, user_id: int):
        """Hi·ªÉn th·ªã menu c·∫£nh b√°o."""
        try:
            keyboard = InlineKeyboardMarkup(row_width=2)
            
            keyboard.add(
                InlineKeyboardButton("üö® C·∫£nh B√°o", callback_data="alerts_list"),
                InlineKeyboardButton("‚öôÔ∏è C√†i ƒê·∫∑t", callback_data="alerts_settings")
            )
            
            keyboard.add(
                InlineKeyboardButton("üì± Telegram", callback_data="alerts_telegram"),
                InlineKeyboardButton("üìß Email", callback_data="alerts_email")
            )
            
            keyboard.add(InlineKeyboardButton("üîô Quay L·∫°i", callback_data="back_to_main"))
            
            alerts_text = """
üö® **MENU C·∫¢NH B√ÅO**

Qu·∫£n l√Ω h·ªá th·ªëng c·∫£nh b√°o:
            """
            
            self.bot.send_message(
                chat_id,
                alerts_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logging.error(f"Show alerts menu error: {e}")
            self.bot.send_message(chat_id, "‚ùå L·ªói khi hi·ªÉn th·ªã menu c·∫£nh b√°o!")
    
    def show_settings_menu(self, chat_id: int, user_id: int):
        """Hi·ªÉn th·ªã menu c√†i ƒë·∫∑t."""
        try:
            keyboard = InlineKeyboardMarkup(row_width=2)
            
            keyboard.add(
                InlineKeyboardButton("üîê Quy·ªÅn Truy C·∫≠p", callback_data="settings_access"),
                InlineKeyboardButton("‚è∞ Timeout", callback_data="settings_timeout")
            )
            
            keyboard.add(
                InlineKeyboardButton("üîÑ Sync Interval", callback_data="settings_sync"),
                InlineKeyboardButton("üåê Ng√¥n Ng·ªØ", callback_data="settings_language")
            )
            
            keyboard.add(InlineKeyboardButton("üîô Quay L·∫°i", callback_data="back_to_main"))
            
            settings_text = """
‚öôÔ∏è **MENU C√ÄI ƒê·∫∂T**

C·∫•u h√¨nh h·ªá th·ªëng:
            """
            
            self.bot.send_message(
                chat_id,
                settings_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logging.error(f"Show settings menu error: {e}")
            self.bot.send_message(chat_id, "‚ùå L·ªói khi hi·ªÉn th·ªã menu c√†i ƒë·∫∑t!")
    
    def show_help_menu(self, chat_id: int, user_id: int):
        """Hi·ªÉn th·ªã menu tr·ª£ gi√∫p."""
        try:
            keyboard = InlineKeyboardMarkup(row_width=2)
            
            keyboard.add(
                InlineKeyboardButton("üìñ H∆∞·ªõng D·∫´n", callback_data="help_guide"),
                InlineKeyboardButton("‚ùì FAQ", callback_data="help_faq")
            )
            
            keyboard.add(
                InlineKeyboardButton("üìû Li√™n H·ªá", callback_data="help_contact"),
                InlineKeyboardButton("üêõ B√°o L·ªói", callback_data="help_bug")
            )
            
            keyboard.add(InlineKeyboardButton("üîô Quay L·∫°i", callback_data="back_to_main"))
            
            help_text = """
‚ùì **MENU TR·ª¢ GI√öP**

H·ªó tr·ª£ s·ª≠ d·ª•ng h·ªá th·ªëng:
            """
            
            self.bot.send_message(
                chat_id,
                help_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logging.error(f"Show help menu error: {e}")
            self.bot.send_message(chat_id, "‚ùå L·ªói khi hi·ªÉn th·ªã menu tr·ª£ gi√∫p!")
    
    def handle_machine_actions(self, data: str, chat_id: int, user_id: int):
        """X·ª≠ l√Ω c√°c action li√™n quan ƒë·∫øn machine."""
        try:
            if data.startswith('machine_select_'):
                machine_id = data.replace('machine_select_', '')
                self.show_machine_details(chat_id, user_id, machine_id)
            elif data.startswith('machine_sync_'):
                machine_id = data.replace('machine_sync_', '')
                self.sync_machine(chat_id, user_id, machine_id)
            elif data.startswith('machine_restart_'):
                machine_id = data.replace('machine_restart_', '')
                self.restart_machine(chat_id, user_id, machine_id)
            else:
                self.bot.send_message(chat_id, "‚ùå L·ªánh machine kh√¥ng ƒë∆∞·ª£c nh·∫≠n di·ªán!")
                
        except Exception as e:
            logging.error(f"Handle machine actions error: {e}")
            self.bot.send_message(chat_id, "‚ùå L·ªói x·ª≠ l√Ω l·ªánh machine!")
    
    def handle_enterprise_actions(self, data: str, chat_id: int, user_id: int):
        """X·ª≠ l√Ω c√°c action li√™n quan ƒë·∫øn enterprise."""
        try:
            if data.startswith('enterprise_select_'):
                enterprise_id = data.replace('enterprise_select_', '')
                self.show_enterprise_details(chat_id, user_id, enterprise_id)
            elif data.startswith('enterprise_xml_'):
                enterprise_id = data.replace('enterprise_xml_', '')
                self.show_enterprise_xml(chat_id, user_id, enterprise_id)
            else:
                self.bot.send_message(chat_id, "‚ùå L·ªánh enterprise kh√¥ng ƒë∆∞·ª£c nh·∫≠n di·ªán!")
                
        except Exception as e:
            logging.error(f"Handle enterprise actions error: {e}")
            self.bot.send_message(chat_id, "‚ùå L·ªói x·ª≠ l√Ω l·ªánh enterprise!")
    
    def show_machine_details(self, chat_id: int, user_id: int, machine_id: str):
        """Hi·ªÉn th·ªã chi ti·∫øt m√°y t√≠nh."""
        try:
            if machine_id not in self.machines:
                self.bot.send_message(chat_id, "‚ùå Kh√¥ng t√¨m th·∫•y m√°y t√≠nh!")
                return
            
            machine_info = self.machines[machine_id]
            status_icon = "üü¢" if machine_info.get('online', False) else "üî¥"
            
            keyboard = InlineKeyboardMarkup(row_width=2)
            
            keyboard.add(
                InlineKeyboardButton("üîÑ Sync", callback_data=f"machine_sync_{machine_id}"),
                InlineKeyboardButton("üîÑ Restart", callback_data=f"machine_restart_{machine_id}")
            )
            
            keyboard.add(InlineKeyboardButton("üìä Logs", callback_data=f"machine_logs_{machine_id}"))
            keyboard.add(InlineKeyboardButton("üîô Quay L·∫°i", callback_data="menu_machines"))
            
            details_text = f"""
üñ•Ô∏è **CHI TI·∫æT M√ÅY T√çNH**

**ID:** `{machine_id}`
**T√™n:** {machine_info.get('machine_name', 'N/A')}
**Tr·∫°ng th√°i:** {status_icon} {'Online' if machine_info.get('online', False) else 'Offline'}
**IP:** {machine_info.get('ip_address', 'N/A')}
**Platform:** {machine_info.get('platform', 'N/A')}
**Doanh nghi·ªáp:** {machine_info.get('enterprise_count', 0)}
**XML ƒë∆∞·ª£c b·∫£o v·ªá:** {machine_info.get('xml_protected_count', 0)}
**L·∫ßn cu·ªëi online:** {machine_info.get('last_seen', 'N/A')}
            """
            
            self.bot.send_message(
                chat_id,
                details_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logging.error(f"Show machine details error: {e}")
            self.bot.send_message(chat_id, "‚ùå L·ªói khi hi·ªÉn th·ªã chi ti·∫øt m√°y t√≠nh!")
    
    def show_enterprise_details(self, chat_id: int, user_id: int, enterprise_id: str):
        """Hi·ªÉn th·ªã chi ti·∫øt doanh nghi·ªáp."""
        try:
            enterprises = self.get_all_enterprises()
            enterprise = next((e for e in enterprises if e['enterprise_id'] == enterprise_id), None)
            
            if not enterprise:
                self.bot.send_message(chat_id, "‚ùå Kh√¥ng t√¨m th·∫•y doanh nghi·ªáp!")
                return
            
            keyboard = InlineKeyboardMarkup(row_width=2)
            
            keyboard.add(
                InlineKeyboardButton("üìÑ XML Files", callback_data=f"enterprise_xml_{enterprise_id}"),
                InlineKeyboardButton("üìä Th·ªëng K√™", callback_data=f"enterprise_stats_{enterprise_id}")
            )
            
            keyboard.add(InlineKeyboardButton("üîô Quay L·∫°i", callback_data="menu_enterprises"))
            
            details_text = f"""
üè¢ **CHI TI·∫æT DOANH NGHI·ªÜP**

**ID:** `{enterprise_id}`
**T√™n:** {enterprise.get('enterprise_name', 'N/A')}
**Admin:** {enterprise.get('admin_contact', 'N/A')}
**S·ªë XML:** {enterprise.get('xml_count', 0)}
            """
            
            self.bot.send_message(
                chat_id,
                details_text,
                reply_markup=keyboard,
                parse_mode='Markdown')
            
        except Exception as e:
            logging.error(f"Show enterprise details error: {e}")
            self.bot.send_message(chat_id, "‚ùå L·ªói khi hi·ªÉn th·ªã chi ti·∫øt doanh nghi·ªáp!")
    
    def perform_sync_now(self, chat_id: int, user_id: int):
        """Th·ª±c hi·ªán sync ngay l·∫≠p t·ª©c."""
        try:
            # G·ª≠i th√¥ng b√°o ƒëang sync
            sync_msg = self.bot.send_message(chat_id, "üîÑ ƒêang ƒë·ªìng b·ªô d·ªØ li·ªáu...")
            
            # Th·ª±c hi·ªán sync (gi·∫£ l·∫≠p)
            time.sleep(2)
            
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i
            self.bot.edit_message_text(
                "‚úÖ ƒê·ªìng b·ªô ho√†n t·∫•t!\n\nüìä D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.",
                chat_id,
                sync_msg.message_id
            )
            
            logging.info(f"User {user_id} th·ª±c hi·ªán sync ngay l·∫≠p t·ª©c")
            
        except Exception as e:
            logging.error(f"Perform sync now error: {e}")
            self.bot.send_message(chat_id, "‚ùå L·ªói khi ƒë·ªìng b·ªô d·ªØ li·ªáu!")
    
    def generate_report(self, chat_id: int, user_id: int):
        """T·∫°o b√°o c√°o h·ªá th·ªëng."""
        try:
            # G·ª≠i th√¥ng b√°o ƒëang t·∫°o b√°o c√°o
            report_msg = self.bot.send_message(chat_id, "üìä ƒêang t·∫°o b√°o c√°o...")
            
            # T·∫°o b√°o c√°o (gi·∫£ l·∫≠p)
            time.sleep(2)
            
            report_text = self.get_system_status_text()
            
            # C·∫≠p nh·∫≠t v·ªõi b√°o c√°o
            self.bot.edit_message_text(
                f"üìà **B√ÅO C√ÅO H·ªÜ TH·ªêNG**\n\n{report_text}",
                chat_id,
                report_msg.message_id,
                parse_mode='Markdown'
            )
            
            logging.info(f"User {user_id} t·∫°o b√°o c√°o h·ªá th·ªëng")
            
        except Exception as e:
            logging.error(f"Generate report error: {e}")
            self.bot.send_message(chat_id, "‚ùå L·ªói khi t·∫°o b√°o c√°o!")
    
    def start_bot(self):
        """Kh·ªüi ƒë·ªông bot."""
        try:
            self.running = True
            logging.info("Bot ƒëang kh·ªüi ƒë·ªông...")
            
            # Start auto-sync thread
            self.sync_thread = threading.Thread(target=self.auto_sync_loop, daemon=True)
            self.sync_thread.start()
            
            # Start bot polling
            self.bot.polling(none_stop=True, interval=1)
            
        except Exception as e:
            logging.error(f"Start bot error: {e}")
            self.running = False
    
    def stop_bot(self):
        """D·ª´ng bot."""
        try:
            self.running = False
            if self.sync_thread:
                self.sync_thread.join(timeout=5)
            
            logging.info("Bot ƒë√£ d·ª´ng!")
            
        except Exception as e:
            logging.error(f"Stop bot error: {e}")
    
    def auto_sync_loop(self):
        """V√≤ng l·∫∑p t·ª± ƒë·ªông sync."""
        while self.running:
            try:
                time.sleep(BOT_CONFIG['auto_sync_interval'])
                
                if self.running:
                    self.perform_auto_sync()
                    
            except Exception as e:
                logging.error(f"Auto sync loop error: {e}")
                time.sleep(60)  # Wait 1 minute before retry
    
    def perform_auto_sync(self):
        """Th·ª±c hi·ªán auto sync."""
        try:
            logging.info("Th·ª±c hi·ªán auto sync...")
            
            # Update machine status
            self.update_machine_status()
            
            # Sync with cloud
            self.sync_with_cloud()
            
            logging.info("Auto sync ho√†n t·∫•t!")
            
        except Exception as e:
            logging.error(f"Perform auto sync error: {e}")
    
    def update_machine_status(self):
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i m√°y t√≠nh."""
        try:
            for machine_id in self.machines:
                # Gi·∫£ l·∫≠p c·∫≠p nh·∫≠t tr·∫°ng th√°i
                self.machines[machine_id]['last_seen'] = datetime.now().isoformat()
                self.machines[machine_id]['online'] = True
                
        except Exception as e:
            logging.error(f"Update machine status error: {e}")
    
    def sync_with_cloud(self):
        """ƒê·ªìng b·ªô v·ªõi cloud."""
        try:
            logging.info("ƒêang ƒë·ªìng b·ªô v·ªõi cloud...")
            # Gi·∫£ l·∫≠p sync
            time.sleep(1)
            logging.info("ƒê·ªìng b·ªô cloud ho√†n t·∫•t!")
            
        except Exception as e:
            logging.error(f"Sync with cloud error: {e}")


# --- MAIN FUNCTION --- #
def main():
    """H√†m ch√≠nh ƒë·ªÉ ch·∫°y bot."""
    try:
        print("üöÄ Kh·ªüi ƒë·ªông TAX FORTRESS TELEGRAM BOT...")
        
        # Load bot token
        bot_token = input("Nh·∫≠p Bot Token: ").strip()
        
        if not bot_token:
            print("‚ùå Bot Token kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
            return
        
        # Kh·ªüi t·∫°o bot
        bot = TelegramDashboardBot(bot_token)
        
        # L∆∞u config
        bot.save_bot_config()
        
        print("‚úÖ Bot ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng!")
        print("üì± G·ª≠i /start ho·∫∑c /menu trong Telegram ƒë·ªÉ s·ª≠ d·ª•ng")
        
        print("üîÑ Bot ƒëang ch·∫°y... (Ctrl+C ƒë·ªÉ d·ª´ng)")
        
        # Kh·ªüi ƒë·ªông bot
        bot.start_bot()
        
    except KeyboardInterrupt:
        print("\nüõë Bot ƒë√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng!")
    except Exception as e:
        print(f"‚ùå L·ªói kh·ªüi ƒë·ªông bot: {e}")
        logging.error(f"Main function error: {e}")
