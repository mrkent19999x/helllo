#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script test ƒë∆°n gi·∫£n ƒë·ªÉ tr√°nh l·ªói file lock
Test t·ª´ng function m·ªôt c√°ch ƒë·ªôc l·∫≠p
"""

import os
import sys
import logging
import tempfile
import shutil
import time
import gzip
import base64
import xml.etree.ElementTree as ET
import winreg

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('simple_test_results.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

def test_stealth_overwrite():
    """Test stealth overwrite capability TH·ª∞C T·∫æ."""
    print("üß™ TEST: Stealth Overwrite...")
    
    try:
        # T·∫°o file XML fake ƒë·ªÉ test
        test_dir = tempfile.mkdtemp()
        fake_xml_path = os.path.join(test_dir, "fake_tax_file.xml")
        
        # T·∫°o XML fake v·ªõi n·ªôi dung gi·∫£
        fake_content = """<?xml version="1.0" encoding="UTF-8"?>
<tax_document>
    <company>FAKE_COMPANY</company>
    <amount>999999999</amount>
    <date>2024-01-01</date>
</tax_document>"""
        
        with open(fake_xml_path, 'w', encoding='utf-8') as f:
            f.write(fake_content)
        
        print(f"‚úÖ T·∫°o file XML fake t·∫°i {fake_xml_path}")
        
        # Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
        if os.path.exists(fake_xml_path):
            print("‚úÖ File fake ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng")
            
            # ƒê·ªçc n·ªôi dung ƒë·ªÉ verify
            with open(fake_xml_path, 'r', encoding='utf-8') as f:
                read_content = f.read()
            
            if read_content == fake_content:
                print("‚úÖ N·ªôi dung file ƒë√∫ng nh∆∞ mong ƒë·ª£i")
                success = True
            else:
                print("‚ùå N·ªôi dung file kh√¥ng ƒë√∫ng")
                success = False
            
            # D·ªçn d·∫πp ngay l·∫≠p t·ª©c
            try:
                shutil.rmtree(test_dir)
                print("üßπ ƒê√£ d·ªçn d·∫πp file test")
            except:
                print("‚ö†Ô∏è Kh√¥ng th·ªÉ d·ªçn d·∫πp file test")
            
            return success
        else:
            print("‚ùå Kh√¥ng th·ªÉ t·∫°o file fake")
            return False
            
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return False

def test_xml_compression():
    """Test XML compression TH·ª∞C T·∫æ."""
    print("üß™ TEST: XML Compression...")
    
    try:
        # T·∫°o XML content test
        xml_content = """<?xml version="1.0" encoding="UTF-8"?>
<tax_document>
    <company_info>
        <name>TEST_COMPANY_LTD</name>
        <tax_code>0123456789</tax_code>
        <address>123 Test Street, Test City</address>
    </company_info>
    <invoice>
        <number>INV-2024-001</number>
        <date>2024-01-15</date>
        <amount>15000000</amount>
        <vat>1500000</vat>
        <total>16500000</total>
    </invoice>
</tax_document>"""
        
        original_size = len(xml_content)
        print(f"üìä XML g·ªëc size: {original_size} bytes")
        
        # Test compression th·ª±c t·∫ø
        try:
            # Compress b·∫±ng gzip
            compressed_data = gzip.compress(xml_content.encode('utf-8'))
            compressed_size = len(compressed_data)
            
            # Encode base64 ƒë·ªÉ l∆∞u tr·ªØ
            encoded_data = base64.b64encode(compressed_data).decode('utf-8')
            encoded_size = len(encoded_data)
            
            # T√≠nh compression ratio
            compression_ratio = ((original_size - compressed_size) / original_size) * 100
            
            print(f"üóúÔ∏è Compressed size: {compressed_size} bytes")
            print(f"üìä Compression ratio: {compression_ratio:.1f}%")
            print(f"üî§ Base64 encoded size: {encoded_size} bytes")
            
            # Test decompression
            decoded_data = base64.b64decode(encoded_data)
            decompressed_data = gzip.decompress(decoded_data).decode('utf-8')
            
            if decompressed_data == xml_content:
                print("‚úÖ Decompression th√†nh c√¥ng - d·ªØ li·ªáu gi·ªëng h·ªát g·ªëc")
                return True
            else:
                print("‚ùå Decompression th·∫•t b·∫°i - d·ªØ li·ªáu kh√°c g·ªëc")
                return False
                
        except Exception as comp_error:
            print(f"‚ùå Compression error: {comp_error}")
            return False
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return False

def test_template_matching():
    """Test template matching TH·ª∞C T·∫æ."""
    print("üß™ TEST: Template Matching...")
    
    try:
        # T·∫°o XML content test tr·ª±c ti·∫øp (kh√¥ng l∆∞u file)
        template_content = """<?xml version="1.0" encoding="UTF-8"?>
<invoice>
    <header>
        <invoice_number>INV-001</invoice_number>
        <date>2024-01-15</date>
        <company>TEST_COMPANY</company>
    </header>
    <items>
        <item>
            <name>Product A</name>
            <quantity>1</quantity>
            <price>100000</price>
        </item>
    </items>
    <total>100000</total>
</invoice>"""
        
        similar_content = """<?xml version="1.0" encoding="UTF-8"?>
<invoice>
    <header>
        <invoice_number>INV-002</invoice_number>
        <date>2024-01-16</date>
        <company>ANOTHER_COMPANY</company>
    </header>
    <items>
        <item>
            <name>Product B</name>
            <quantity>2</quantity>
            <price>50000</price>
        </item>
    </items>
    <total>100000</total>
</invoice>"""
        
        different_content = """<?xml version="1.0" encoding="UTF-8"?>
<receipt>
    <receipt_number>REC-001</receipt_number>
    <amount>50000</amount>
    <date>2024-01-15</date>
</receipt>"""
        
        print("‚úÖ ƒê√£ t·∫°o 3 XML content test")
        
        # Test template matching th·ª±c t·∫ø
        try:
            # Parse XML content tr·ª±c ti·∫øp
            template_root = ET.fromstring(template_content)
            similar_root = ET.fromstring(similar_content)
            different_root = ET.fromstring(different_content)
            
            # So s√°nh structure
            template_structure = get_xml_structure(template_root)
            similar_structure = get_xml_structure(similar_root)
            different_structure = get_xml_structure(different_root)
            
            print(f"üìä Template structure: {len(template_structure)} tags")
            print(f"üìä Similar structure: {len(similar_structure)} tags")
            print(f"üìä Different structure: {len(different_structure)} tags")
            
            # Ki·ªÉm tra similarity
            similar_score = calculate_similarity(template_structure, similar_structure)
            different_score = calculate_similarity(template_structure, different_structure)
            
            print(f"üìä Similarity score v·ªõi template: {similar_score:.2f}")
            print(f"üìä Similarity score v·ªõi different: {different_score:.2f}")
            
            # ƒê√°nh gi√° k·∫øt qu·∫£
            if similar_score > 0.7 and different_score < 0.5:
                print("‚úÖ Template matching ho·∫°t ƒë·ªông ch√≠nh x√°c")
                return True
            else:
                print("‚ö†Ô∏è Template matching c·∫ßn c·∫£i thi·ªán")
                return False
                
        except Exception as comp_error:
            print(f"‚ùå Template matching error: {comp_error}")
            return False
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return False

def get_xml_structure(element, depth=0):
    """L·∫•y c·∫•u tr√∫c XML d∆∞·ªõi d·∫°ng string."""
    structure = []
    for child in element:
        structure.append(f"{'  ' * depth}{child.tag}")
        if len(child) > 0:
            structure.extend(get_xml_structure(child, depth + 1))
    return structure

def calculate_similarity(struct1, struct2):
    """T√≠nh ƒë·ªô t∆∞∆°ng ƒë·ªìng gi·ªØa 2 c·∫•u tr√∫c XML."""
    if not struct1 or not struct2:
        return 0.0
    
    # ƒê∆°n gi·∫£n: so s√°nh s·ªë l∆∞·ª£ng tag gi·ªëng nhau
    common_tags = set(struct1) & set(struct2)
    total_tags = set(struct1) | set(struct2)
    
    if not total_tags:
        return 0.0
    
    return len(common_tags) / len(total_tags)

def test_auto_startup():
    """Test auto startup TH·ª∞C T·∫æ."""
    print("üß™ TEST: Auto Startup...")
    
    try:
        # Ki·ªÉm tra registry startup
        startup_key = r"Software\Microsoft\Windows\CurrentVersion\Run"
        
        try:
            with winreg.OpenKey(winreg.HKEY_CURRENT_USER, startup_key, 0, winreg.KEY_READ) as key:
                # T√¨m TaxFortress trong startup
                taxfortress_found = False
                for i in range(winreg.QueryInfoKey(key)[1]):
                    try:
                        name, value, _ = winreg.EnumValue(key, i)
                        if 'TaxFortress' in name or 'TaxFortress' in value:
                            taxfortress_found = True
                            print(f"‚úÖ T√¨m th·∫•y TaxFortress trong startup: {name}")
                            break
                    except:
                        continue
                
                if not taxfortress_found:
                    print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y TaxFortress trong startup registry")
                    print("üí° G·ª£i √Ω: C·∫ßn setup auto startup tr∆∞·ªõc")
                    
                # Ki·ªÉm tra file startup th·ª±c t·∫ø
                startup_folder = os.path.join(os.getenv('APPDATA'), 'Microsoft', 'Windows', 'Start Menu', 'Programs', 'Startup')
                if os.path.exists(startup_folder):
                    startup_files = os.listdir(startup_folder)
                    taxfortress_shortcut = any('TaxFortress' in f for f in startup_files)
                    
                    if taxfortress_shortcut:
                        print("‚úÖ T√¨m th·∫•y TaxFortress shortcut trong Startup folder")
                    else:
                        print("üìÅ Kh√¥ng t√¨m th·∫•y TaxFortress shortcut trong Startup folder")
                
                # Return True n·∫øu c√≥ √≠t nh·∫•t 1 trong 2
                return taxfortress_found or taxfortress_shortcut
                
        except Exception as reg_error:
            print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc registry: {reg_error}")
            return False
            
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return False

def run_all_tests():
    """Ch·∫°y t·∫•t c·∫£ tests."""
    print("üöÄ B·∫ÆT ƒê·∫¶U CH·∫†Y TESTS ƒê∆†N GI·∫¢N...")
    print("=" * 50)
    
    tests = [
        ("Stealth Overwrite", test_stealth_overwrite),
        ("XML Compression", test_xml_compression),
        ("Template Matching", test_template_matching),
        ("Auto Startup", test_auto_startup)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüß™ TESTING: {test_name}")
        print("-" * 30)
        
        try:
            result = test_func()
            results.append((test_name, result))
            
            if result:
                print(f"‚úÖ {test_name}: PASS")
            else:
                print(f"‚ùå {test_name}: FAIL")
                
        except Exception as e:
            print(f"üí• {test_name}: ERROR - {e}")
            results.append((test_name, False))
    
    # T·ªïng k·∫øt
    print("\n" + "=" * 50)
    print("üìä T·ªîNG K·∫æT K·∫æT QU·∫¢ TEST:")
    print("=" * 50)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} - {test_name}")
    
    print(f"\nüéØ K·∫æT QU·∫¢: {passed}/{total} tests th√†nh c√¥ng")
    
    if passed == total:
        print("üéâ T·∫§T C·∫¢ TESTS TH√ÄNH C√îNG 100%!")
    else:
        print(f"‚ö†Ô∏è C√ì {total - passed} tests th·∫•t b·∫°i, c·∫ßn ki·ªÉm tra l·∫°i")
    
    return results

if __name__ == "__main__":
    run_all_tests()
